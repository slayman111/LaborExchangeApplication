<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:properties="clr-namespace:LaborExchangeApplication.Properties">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="ColorDictionary.xaml" />
        <ResourceDictionary Source="TemplateDictionary.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="WindowStyle" TargetType="{x:Type Window}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static properties:ColorSettings.Default}, Path=ColorMode}" Value="Light">
                <Setter Property="Background" Value="White" />
            </DataTrigger>

            <DataTrigger Binding="{Binding Source={x:Static properties:ColorSettings.Default}, Path=ColorMode}" Value="Dark">
                <Setter Property="Background" Value="{StaticResource DarkBackgroundColor}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="BasicTitleTextBlockStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="22" />
        <Setter Property="FontFamily" Value="Arial" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="10" />
    </Style>

    <Style x:Key="TitleTextBlockStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource BasicTitleTextBlockStyle}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static properties:ColorSettings.Default}, Path=ColorMode}" Value="Light">
                <Setter Property="Foreground" Value="Black" />
            </DataTrigger>

            <DataTrigger Binding="{Binding Source={x:Static properties:ColorSettings.Default}, Path=ColorMode}" Value="Dark">
                <Setter Property="Foreground" Value="White" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="BasicTextBlockStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="18" />
    </Style>

    <Style x:Key="TextBlockStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource BasicTextBlockStyle}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static properties:ColorSettings.Default}, Path=ColorMode}" Value="Light">
                <Setter Property="Foreground" Value="Black" />
            </DataTrigger>

            <DataTrigger Binding="{Binding Source={x:Static properties:ColorSettings.Default}, Path=ColorMode}" Value="Dark">
                <Setter Property="Foreground" Value="White" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TextBlockRowStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TextBlockStyle}">
        <Setter Property="Margin" Value="15,5" />
        <Setter Property="Height" Value="30" />
    </Style>

    <Style x:Key="BasicTextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="FontSize" Value="18" />
    </Style>

    <Style x:Key="TextBoxStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource BasicTextBoxStyle}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static properties:ColorSettings.Default}, Path=ColorMode}" Value="Light">
                <Setter Property="Background" Value="White" />
                <Setter Property="Foreground" Value="Black" />
            </DataTrigger>

            <DataTrigger Binding="{Binding Source={x:Static properties:ColorSettings.Default}, Path=ColorMode}" Value="Dark">
                <Setter Property="Background" Value="{StaticResource ResourceKey=DarkTextBoxBackgroundColor}" />
                <Setter Property="Foreground" Value="White" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TextBoxRowStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource TextBoxStyle}">
        <Setter Property="Margin" Value="15,5" />
        <Setter Property="Height" Value="30" />
        <Setter Property="TextWrapping" Value="Wrap" />
    </Style>

    <Style x:Key="BasicButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FontSize" Value="18" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Name="border"
                        BorderThickness="1"
                        Padding="4,2"
                        BorderBrush="DarkGray"
                        CornerRadius="4"
                        Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="Black" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource BasicButtonStyle}">
        <Setter Property="Margin" Value="15,5" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static properties:ColorSettings.Default}, Path=ColorMode}" Value="Light">
                <Setter Property="Background" Value="{StaticResource LightMainColor}" />
                <Setter Property="Foreground" Value="Black" />
            </DataTrigger>

            <DataTrigger Binding="{Binding Source={x:Static properties:ColorSettings.Default}, Path=ColorMode}" Value="Dark">
                <Setter Property="Background" Value="{StaticResource DarkMainColor}" />
                <Setter Property="Foreground" Value="White" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="BasicBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="0" />
    </Style>

    <Style x:Key="BorderStyle" TargetType="{x:Type Border}" BasedOn="{StaticResource BasicBorderStyle}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static properties:ColorSettings.Default}, Path=ColorMode}" Value="Light">
                <Setter Property="Background" Value="{StaticResource LightMainColor}" />
            </DataTrigger>

            <DataTrigger Binding="{Binding Source={x:Static properties:ColorSettings.Default}, Path=ColorMode}" Value="Dark">
                <Setter Property="Background" Value="{StaticResource DarkMainColor}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="BasicImageButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Width" Value="40" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ColorSwitchImageButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource BasicImageButtonStyle}">
        <Setter Property="ContentTemplate" Value="{StaticResource DarkModeImageLight}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static properties:ColorSettings.Default}, Path=ColorMode}" Value="Light">
                <Setter Property="ContentTemplate" Value="{StaticResource DarkModeImageLight}" />
            </DataTrigger>

            <DataTrigger Binding="{Binding Source={x:Static properties:ColorSettings.Default}, Path=ColorMode}" Value="Dark">
                <Setter Property="ContentTemplate" Value="{StaticResource DarkModeImageDark}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="PasswordVisibiliryImageButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource BasicImageButtonStyle}">
        <Setter Property="ContentTemplate" Value="{StaticResource PasswordVisibilityImageLight}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static properties:ColorSettings.Default}, Path=ColorMode}" Value="Light">
                <Setter Property="ContentTemplate" Value="{StaticResource PasswordVisibilityImageLight}" />
            </DataTrigger>

            <DataTrigger Binding="{Binding Source={x:Static properties:ColorSettings.Default}, Path=ColorMode}" Value="Dark">
                <Setter Property="ContentTemplate" Value="{StaticResource PasswordVisibilityImageDark}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="BasicPasswordBoxStyle" TargetType="{x:Type PasswordBox}">
        <Setter Property="FontSize" Value="18" />
    </Style>

    <Style x:Key="PasswordBoxStyle" TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource BasicPasswordBoxStyle}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static properties:ColorSettings.Default}, Path=ColorMode}" Value="Light">
                <Setter Property="Background" Value="White" />
                <Setter Property="Foreground" Value="Black" />
            </DataTrigger>

            <DataTrigger Binding="{Binding Source={x:Static properties:ColorSettings.Default}, Path=ColorMode}" Value="Dark">
                <Setter Property="Background" Value="{StaticResource ResourceKey=DarkTextBoxBackgroundColor}" />
                <Setter Property="Foreground" Value="White" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="PasswordBoxRowStyle" TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource PasswordBoxStyle}">
        <Setter Property="Margin" Value="15,5" />
        <Setter Property="Height" Value="30" />
    </Style>

    <Style x:Key="BasicCheckBoxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="FontSize" Value="18" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>

    <Style x:Key="CheckBoxStyle" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource BasicCheckBoxStyle}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static properties:ColorSettings.Default}, Path=ColorMode}" Value="Light">
                <Setter Property="Background" Value="White" />
                <Setter Property="Foreground" Value="Black" />
            </DataTrigger>

            <DataTrigger Binding="{Binding Source={x:Static properties:ColorSettings.Default}, Path=ColorMode}" Value="Dark">
                <Setter Property="Background" Value="{StaticResource ResourceKey=DarkTextBoxBackgroundColor}" />
                <Setter Property="Foreground" Value="White" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="BasicDatePickerStyle" TargetType="{x:Type DatePicker}">
        <Setter Property="FontSize" Value="18" />
        <Setter Property="Height" Value="30" />
    </Style>

    <Style x:Key="DatePickerStyle" TargetType="{x:Type DatePicker}" BasedOn="{StaticResource BasicDatePickerStyle}">
        <Setter Property="Margin" Value="15,5" />
        <Style.Resources>
            <Style TargetType="DatePickerTextBox">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Source={x:Static properties:ColorSettings.Default}, Path=ColorMode}" Value="Light">
                        <Setter Property="Background" Value="White" />
                        <Setter Property="Foreground" Value="Black" />
                    </DataTrigger>

                    <DataTrigger Binding="{Binding Source={x:Static properties:ColorSettings.Default}, Path=ColorMode}" Value="Dark">
                        <Setter Property="Background" Value="{StaticResource ResourceKey=DarkTextBoxBackgroundColor}" />
                        <Setter Property="Foreground" Value="White" />
                    </DataTrigger>
                </Style.Triggers>
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="White" Opacity="0" />
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static properties:ColorSettings.Default}, Path=ColorMode}" Value="Light">
                <Setter Property="Background" Value="White" />
                <Setter Property="Foreground" Value="Black" />
            </DataTrigger>

            <DataTrigger Binding="{Binding Source={x:Static properties:ColorSettings.Default}, Path=ColorMode}" Value="Dark">
                <Setter Property="Background" Value="{StaticResource ResourceKey=DarkTextBoxBackgroundColor}" />
                <Setter Property="Foreground" Value="White" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="BasicRibbonComboBoxStyle" TargetType="{x:Type RibbonComboBox}">
        <Setter Property="FontSize" Value="18" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="#FFABADAF" />
        <Setter Property="IsEditable" Value="False" />
    </Style>

    <Style x:Key="RibbonComboBoxStyle" TargetType="{x:Type RibbonComboBox}" BasedOn="{StaticResource BasicRibbonComboBoxStyle}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static properties:ColorSettings.Default}, Path=ColorMode}" Value="Light">
                <Setter Property="Background" Value="White" />
                <Setter Property="MouseOverBackground" Value="White" />
                <Setter Property="Foreground" Value="Black" />
            </DataTrigger>

            <DataTrigger Binding="{Binding Source={x:Static properties:ColorSettings.Default}, Path=ColorMode}" Value="Dark">
                <Setter Property="Background" Value="{StaticResource ResourceKey=DarkTextBoxBackgroundColor}" />
                <Setter Property="MouseOverBackground" Value="{StaticResource ResourceKey=DarkTextBoxBackgroundColor}" />
                <Setter Property="Foreground" Value="White" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="RibbonComboBoxRowStyle" TargetType="{x:Type RibbonComboBox}" BasedOn="{StaticResource RibbonComboBoxStyle}">
        <Setter Property="Margin" Value="13,5" />
        <Setter Property="Height" Value="24" />
        <Setter Property="FontSize" Value="15" />
        <Setter Property="SelectionBoxWidth" Value="200" />
    </Style>

    <Style x:Key="RibbonGalleryStyle" TargetType="{x:Type RibbonGallery}">
        <Setter Property="IsSynchronizedWithCurrentItem" Value="True" />
        <Setter Property="Foreground" Value="Black" />
    </Style>

    <Style x:Key="ListBoxStyle" TargetType="{x:Type ListBox}">
        <Setter Property="SelectionMode" Value="Single" />
        <Setter Property="IsSynchronizedWithCurrentItem" Value="True" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="SelectedIndex" Value="0" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="Transparent" />
    </Style>

    <Style TargetType="{x:Type ListBoxItem}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="IsSelected" Value="True" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ScrollBarTrackThumb" TargetType="{x:Type Thumb}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid x:Name="Grid">
                        <Rectangle HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                Width="Auto"
                                Height="Auto"
                                Fill="Transparent" />
                        <Border x:Name="CornerScrollBarRectangle"
                            CornerRadius="5"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            Width="Auto"
                            Height="Auto"
                            Margin="0,1,0,1"
                            Background="{TemplateBinding Background}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Tag"
                                Value="Horizontal">
                            <Setter TargetName="CornerScrollBarRectangle"
                                Property="Width"
                                Value="Auto" />
                            <Setter TargetName="CornerScrollBarRectangle"
                                Property="Height"
                                Value="6" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsFlicksEnabled"
            Value="false" />
        <Setter Property="Background"
            Value="Transparent" />
        <Setter Property="Width"
            Value="7" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="GridRoot"
                        Width="7"
                        Background="{TemplateBinding Background}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="0.00001*" />
                        </Grid.RowDefinitions>
                        <Track x:Name="PART_Track"
                            Grid.Row="0"
                            IsDirectionReversed="true"
                            Focusable="false">
                            <Track.Thumb>
                                <Thumb x:Name="Thumb"
                                    Background="{TemplateBinding Foreground}"
                                    Style="{DynamicResource ScrollBarTrackThumb}" />
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton x:Name="PageUp"
                                            Command="ScrollBar.PageDownCommand"
                                            Opacity="0"
                                            Focusable="false" />
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton x:Name="PageDown"
                                            Command="ScrollBar.PageUpCommand"
                                            Opacity="0"
                                            Focusable="false" />
                            </Track.DecreaseRepeatButton>
                        </Track>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                Value="false">
                            <Setter TargetName="Thumb"
                                Property="Visibility"
                                Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Orientation"
                                Value="Horizontal">
                            <Setter TargetName="GridRoot"
                                Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="PART_Track"
                                Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Width"
                                Value="Auto" />
                            <Setter Property="Height"
                                Value="8" />
                            <Setter TargetName="Thumb"
                                Property="Tag"
                                Value="Horizontal" />
                            <Setter TargetName="PageDown"
                                Property="Command"
                                Value="ScrollBar.PageLeftCommand" />
                            <Setter TargetName="PageUp"
                                Property="Command"
                                Value="ScrollBar.PageRightCommand" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static properties:ColorSettings.Default}, Path=ColorMode}" Value="Light">
                <Setter Property="Foreground" Value="{StaticResource LightMainColor}" />
            </DataTrigger>

            <DataTrigger Binding="{Binding Source={x:Static properties:ColorSettings.Default}, Path=ColorMode}" Value="Dark">
                <Setter Property="Foreground" Value="{StaticResource DarkMainColor}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="BorderComboBox" TargetType="{x:Type Border}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static properties:ColorSettings.Default}, Path=ColorMode}" Value="Light">
                <Setter Property="Background" Value="White" />
            </DataTrigger>

            <DataTrigger Binding="{Binding Source={x:Static properties:ColorSettings.Default}, Path=ColorMode}" Value="Dark">
                <Setter Property="Background" Value="{StaticResource ResourceKey=DarkTextBoxBackgroundColor}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ComboBoxTextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Border Style="{StaticResource BorderComboBox}" BorderThickness="1" BorderBrush="DarkGray">
                            <ScrollViewer x:Name="PART_ContentHost" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonForComboBox" TargetType="{x:Type ToggleButton}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static properties:ColorSettings.Default}, Path=ColorMode}" Value="Light">
                <Setter Property="Background" Value="{StaticResource LightMainColor}" />
            </DataTrigger>

            <DataTrigger Binding="{Binding Source={x:Static properties:ColorSettings.Default}, Path=ColorMode}" Value="Dark">
                <Setter Property="Background" Value="{StaticResource DarkMainColor}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ComboBoxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="FontSize" Value="16" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition MaxWidth="12" />
                        </Grid.ColumnDefinitions>
                        <TextBox Name="PART_EditableTextBox" Style="{StaticResource ComboBoxTextBoxStyle}" Padding="5,0,0,0"
                                 Height="{TemplateBinding Height}" />
                        <ToggleButton Grid.Column="1" Style="{StaticResource ButtonForComboBox}" Height="{TemplateBinding Height}" Focusable="False"
                                      IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                      ClickMode="Press">
                            <Path Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 4 4 L 8 0 Z"
                                  Fill="DarkGray" />
                        </ToggleButton>
                        <ContentPresenter Name="ContentSite" Content="{TemplateBinding SelectionBoxItem}"
                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            VerticalAlignment="Center" HorizontalAlignment="Stretch" Margin="4" />
                        <Popup Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Focusable="False"
                               PopupAnimation="Fade">

                            <Grid Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding ActualWidth}"
                                  MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border x:Name="DropDownBorder" Style="{StaticResource BorderComboBox}" BorderThickness="1" />
                                <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static properties:ColorSettings.Default}, Path=ColorMode}" Value="Light">
                <Setter Property="Background" Value="White" />
                <Setter Property="Foreground" Value="Black" />
            </DataTrigger>

            <DataTrigger Binding="{Binding Source={x:Static properties:ColorSettings.Default}, Path=ColorMode}" Value="Dark">
                <Setter Property="Background" Value="{StaticResource ResourceKey=DarkTextBoxBackgroundColor}" />
                <Setter Property="Foreground" Value="White" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ComboBoxRowStyle" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource ComboBoxStyle}">
        <Setter Property="Margin" Value="15,5" />
        <Setter Property="Height" Value="30" />
    </Style>
</ResourceDictionary>